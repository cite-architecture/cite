apply plugin: "base"
apply plugin:  "groovy"
apply plugin:  "maven"

group = "edu.harvard.chs"
version = '0.80.0'

apply from: "versions.gradle"

if (hasProperty('pub')) {
    System.err.print "Using configuration data from ${pub}"
    File confFile = new File(pub)
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${pub} found.")
    } else {
        apply from: pub
    }

} else {
    File confFile = new File("pub.gradle")
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${confFile} found\
.")
    } else {
        println "Using default configuration in 'pub.gradle'"
        apply from: "pub.gradle"
    }
}



repositories {
    mavenCentral()
}

configurations {
    rngs
}


dependencies {
    groovy group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyVersion
    //compile group: 'org.iso_relax.verifier.jaxp.validation', name: 'isorelax-jaxp-bridge', version : '1.0'
    compile group: 'com.thaiopensource', name:'jing', version: jingVersion


    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group :'xmlunit', name: 'xmlunit', version: xmlunitVersion
}


task sourcesZip(type: Zip, dependsOn:classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
}

task docsZip(type: Zip, dependsOn: groovydoc) {
    classifier = 'groovydoc'
    from groovydoc.destinationDir
    description = 'Builds zip file of java/groovy docs'

}

task schemas(type: Zip)  {
    classifier = 'schemas'
    description = 'Builds zip file of TextInventory schemas.'
    from(file("schemas"))
    include("**/*.rng")
    baseName = "textInventorySchemas"
}


artifacts {
    archives docsZip
    archives sourcesZip
    archives schemas
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: nexusRepo) {                   
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}

uploadRngs {
    repositories.mavenDeployer {
        repository(url: nexusRepo) {                   
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}


